plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    compileSdkVersion 34



    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.svarnew.app"
        minSdkVersion 26
        targetSdkVersion flutter.targetSdkVersion
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        
    }
    // compileOptions {
    //     sourceCompatibility JavaVersion.VERSION_11
    //     targetCompatibility JavaVersion.VERSION_11
    // }
    // kotlinOptions {
    //     jvmTarget = "11"
    // }
     compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    //  splits {
    //     abi {
    //         enable true
    //         reset()
    //         include 'armeabi-v7a', 'arm64-v8a'
    //         universalApk false  // If you want to also generate a universal APK that includes all architectures, set this to true.
    //     }
    // }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '17'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
flutter {
    source '../..'
}

dependencies {
    // Firebase BoM
    implementation platform("com.google.firebase:firebase-bom:33.1.0")
    
    implementation("com.google.firebase:firebase-appdistribution:16.0.0-beta13") 

    implementation "androidx.multidex:multidex:2.0.1"
}

